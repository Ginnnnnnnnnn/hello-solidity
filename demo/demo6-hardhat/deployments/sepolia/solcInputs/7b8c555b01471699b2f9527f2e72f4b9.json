{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n// 集资合约\n// 1.集资期间可以进行 fund 集资\n// 2.投资期结束 达到目标: 拥有者可以进行提现; 未达到目标: 拥有者可以进行退款\ncontract FundMe {\n    AggregatorV3Interface public dataFeed;\n\n    // 合约锁定信息\n    uint256 deploymentTimestamp;\n    uint256 lockTime;\n\n    // 投资信息\n    mapping(address => uint256) public funderMap;\n\n    // 最小投资额度（USD）\n    // wei    = 1\n    // gwei   = 1 * 10 ** 9\n    // finney = 1 * 10 ** 15\n    // ether  = 1 * 10 ** 18\n    uint256 MIN_VALUE = 10 * 10 ** 18;\n\n    // 目标金额（USD）\n    uint256 constant TAGET = 100 * 10 ** 18;\n\n    // 合约拥有者\n    address public owner;\n\n    constructor(uint256 _lockTime, address dataFeedAddr) {\n        dataFeed = AggregatorV3Interface(dataFeedAddr);\n        deploymentTimestamp = block.timestamp;\n        lockTime = _lockTime;\n        owner = msg.sender;\n    }\n\n    // 收款函数\n    function fund() external payable {\n        // 校验最小收款额度必须大于1ETH\n        require(converETHToUSD(msg.value) >= MIN_VALUE, \"fund more ETH\");\n        // 校验募捐最大时间\n        require(\n            block.timestamp <= deploymentTimestamp + lockTime,\n            \"window is closed\"\n        );\n        // 记录投资者信息\n        funderMap[msg.sender] += msg.value;\n    }\n\n    // 转换 ETH 到 USD\n    function converETHToUSD(uint256 ethAmount) internal view returns (uint256) {\n        // ETH / USD precision = 10 ** 8\n        // X   / USD precision = 10 ** 18\n        uint256 ethPrice = uint256(getChainlinkDataFeedLatestAnswer());\n        return (ethAmount * ethPrice) / (10 ** 8);\n    }\n\n    function getChainlinkDataFeedLatestAnswer() internal view returns (int256) {\n        // prettier-ignore\n        (\n            /* uint80 roundId */,\n            int256 answer,\n            /*uint256 startedAt*/,\n            /*uint256 updatedAt*/,\n            /*uint80 answeredInRound*/\n        ) = dataFeed.latestRoundData();\n        return answer;\n    }\n\n    function getFund() external windowsClose onlyOwner {\n        require(\n            converETHToUSD(address(this).balance) >= TAGET,\n            \"Target is not reached\"\n        );\n        // transfer : 转账失败回滚\n        // payable(msg.sender).transfer(address(this).balance);\n        // send : 返回执行结果\n        // bool success = payable(msg.sender).send(address(this).balance);\n        // require(success,\"transfer failed\");\n        // call : 返回 value 和 执行结果\n        (bool success /*result*/, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(success, \"transfer failed\");\n    }\n\n    function transferOwner(address newOwner) external onlyOwner {\n        owner = newOwner;\n    }\n\n    function refund() external windowsClose {\n        require(\n            converETHToUSD(address(this).balance) <= TAGET,\n            \"Target is reached\"\n        );\n        uint256 amount = funderMap[msg.sender];\n        require(amount != 0, \"Target is reached\");\n        (bool success /*result*/, ) = payable(msg.sender).call{\n            value: funderMap[msg.sender]\n        }(\"\");\n        require(success, \"transfer failed\");\n        funderMap[msg.sender] = 0;\n    }\n\n    // 修改器\n    modifier windowsClose() {\n        require(\n            block.timestamp >= deploymentTimestamp + lockTime,\n            \"window is not closed\"\n        );\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"this function can only be called by owner\"\n        );\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}