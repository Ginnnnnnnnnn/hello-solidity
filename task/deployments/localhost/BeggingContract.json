{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DonationReceived",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getDonation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTopDonors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3359b295545797a088dcdb5e5f9f8c8f20199c097ade7a2b49440a64d58356d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "737460",
    "logsBloom": "0x
    "blockHash": "0x88de2b00a5de4d3656f0b601d385713ff3a91e053137ac73fdb460300c284394",
    "transactionHash": "0xc3359b295545797a088dcdb5e5f9f8c8f20199c097ade7a2b49440a64d58356d",
    "logs": [],
    "blockNumber": 9,
    "cumulativeGasUsed": "737460",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "880f970cb0f97c450265bc6d85b7edff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonationReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopDonors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/task2/BeggingContract.sol\":\"BeggingContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/task2/BeggingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.27;\\r\\n\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// \\u4f5c\\u4e1a3\\uff1a\\u7f16\\u5199\\u4e00\\u4e2a\\u8ba8\\u996d\\u5408\\u7ea6\\r\\n// \\u4efb\\u52a1\\u76ee\\u6807\\r\\n// 1.\\u4f7f\\u7528 Solidity \\u7f16\\u5199\\u4e00\\u4e2a\\u5408\\u7ea6\\uff0c\\u5141\\u8bb8\\u7528\\u6237\\u5411\\u5408\\u7ea6\\u5730\\u5740\\u53d1\\u9001\\u4ee5\\u592a\\u5e01\\u3002\\r\\n// 2.\\u8bb0\\u5f55\\u6bcf\\u4e2a\\u6350\\u8d60\\u8005\\u7684\\u5730\\u5740\\u548c\\u6350\\u8d60\\u91d1\\u989d\\u3002\\r\\n// 3.\\u5141\\u8bb8\\u5408\\u7ea6\\u6240\\u6709\\u8005\\u63d0\\u53d6\\u6240\\u6709\\u6350\\u8d60\\u7684\\u8d44\\u91d1\\u3002\\r\\n// \\u4efb\\u52a1\\u6b65\\u9aa4\\r\\n// 1.\\u7f16\\u5199\\u5408\\u7ea6\\r\\n//  \\u00b7\\u521b\\u5efa\\u4e00\\u4e2a\\u540d\\u4e3a BeggingContract \\u7684\\u5408\\u7ea6\\u3002\\r\\n//  \\u00b7\\u5408\\u7ea6\\u5e94\\u5305\\u542b\\u4ee5\\u4e0b\\u529f\\u80fd\\uff1a\\r\\n//  \\u00b7\\u4e00\\u4e2a mapping \\u6765\\u8bb0\\u5f55\\u6bcf\\u4e2a\\u6350\\u8d60\\u8005\\u7684\\u6350\\u8d60\\u91d1\\u989d\\u3002\\r\\n//  \\u00b7\\u4e00\\u4e2a donate \\u51fd\\u6570\\uff0c\\u5141\\u8bb8\\u7528\\u6237\\u5411\\u5408\\u7ea6\\u53d1\\u9001\\u4ee5\\u592a\\u5e01\\uff0c\\u5e76\\u8bb0\\u5f55\\u6350\\u8d60\\u4fe1\\u606f\\u3002\\r\\n//  \\u00b7\\u4e00\\u4e2a withdraw \\u51fd\\u6570\\uff0c\\u5141\\u8bb8\\u5408\\u7ea6\\u6240\\u6709\\u8005\\u63d0\\u53d6\\u6240\\u6709\\u8d44\\u91d1\\u3002\\r\\n//  \\u00b7\\u4e00\\u4e2a getDonation \\u51fd\\u6570\\uff0c\\u5141\\u8bb8\\u67e5\\u8be2\\u67d0\\u4e2a\\u5730\\u5740\\u7684\\u6350\\u8d60\\u91d1\\u989d\\u3002\\r\\n//  \\u00b7\\u4f7f\\u7528 payable \\u4fee\\u9970\\u7b26\\u548c address.transfer \\u5b9e\\u73b0\\u652f\\u4ed8\\u548c\\u63d0\\u6b3e\\u3002\\r\\n// 2.\\u90e8\\u7f72\\u5408\\u7ea6\\r\\n//  \\u00b7\\u5728 Remix IDE \\u4e2d\\u7f16\\u8bd1\\u5408\\u7ea6\\u3002\\r\\n//  \\u00b7\\u90e8\\u7f72\\u5408\\u7ea6\\u5230 Goerli \\u6216 Sepolia \\u6d4b\\u8bd5\\u7f51\\u3002\\r\\n// 3.\\u6d4b\\u8bd5\\u5408\\u7ea6\\r\\n//  \\u00b7\\u4f7f\\u7528 MetaMask \\u5411\\u5408\\u7ea6\\u53d1\\u9001\\u4ee5\\u592a\\u5e01\\uff0c\\u6d4b\\u8bd5 donate \\u529f\\u80fd\\u3002\\r\\n//  \\u00b7\\u8c03\\u7528 withdraw \\u51fd\\u6570\\uff0c\\u6d4b\\u8bd5\\u5408\\u7ea6\\u6240\\u6709\\u8005\\u662f\\u5426\\u53ef\\u4ee5\\u63d0\\u53d6\\u8d44\\u91d1\\u3002\\r\\n//  \\u00b7\\u8c03\\u7528 getDonation \\u51fd\\u6570\\uff0c\\u67e5\\u8be2\\u67d0\\u4e2a\\u5730\\u5740\\u7684\\u6350\\u8d60\\u91d1\\u989d\\u3002\\r\\n// \\u4efb\\u52a1\\u8981\\u6c42\\r\\n// 1.\\u5408\\u7ea6\\u4ee3\\u7801\\uff1a\\r\\n//  \\u00b7\\u4f7f\\u7528 mapping \\u8bb0\\u5f55\\u6350\\u8d60\\u8005\\u7684\\u5730\\u5740\\u548c\\u91d1\\u989d\\u3002\\r\\n//  \\u00b7\\u4f7f\\u7528 payable \\u4fee\\u9970\\u7b26\\u5b9e\\u73b0 donate \\u548c withdraw \\u51fd\\u6570\\u3002\\r\\n//  \\u00b7\\u4f7f\\u7528 onlyOwner \\u4fee\\u9970\\u7b26\\u9650\\u5236 withdraw \\u51fd\\u6570\\u53ea\\u80fd\\u7531\\u5408\\u7ea6\\u6240\\u6709\\u8005\\u8c03\\u7528\\u3002\\r\\n// 2.\\u6d4b\\u8bd5\\u7f51\\u90e8\\u7f72\\uff1a\\r\\n//  \\u00b7\\u5408\\u7ea6\\u5fc5\\u987b\\u90e8\\u7f72\\u5230 Goerli \\u6216 Sepolia \\u6d4b\\u8bd5\\u7f51\\u3002\\r\\n// 3.\\u529f\\u80fd\\u6d4b\\u8bd5\\uff1a\\r\\n//  \\u00b7\\u786e\\u4fdd donate\\u3001withdraw \\u548c getDonation \\u51fd\\u6570\\u6b63\\u5e38\\u5de5\\u4f5c\\u3002\\r\\n// \\u63d0\\u4ea4\\u5185\\u5bb9\\r\\n// 1.\\u5408\\u7ea6\\u4ee3\\u7801\\uff1a\\u63d0\\u4ea4 Solidity \\u5408\\u7ea6\\u6587\\u4ef6\\uff08\\u5982 BeggingContract.sol\\uff09\\u3002\\r\\n// 2.\\u5408\\u7ea6\\u5730\\u5740\\uff1a\\u63d0\\u4ea4\\u90e8\\u7f72\\u5230\\u6d4b\\u8bd5\\u7f51\\u7684\\u5408\\u7ea6\\u5730\\u5740\\u3002\\r\\n// 3.\\u6d4b\\u8bd5\\u622a\\u56fe\\uff1a\\u63d0\\u4ea4\\u5728 Remix \\u6216 Etherscan \\u4e0a\\u6d4b\\u8bd5\\u5408\\u7ea6\\u7684\\u622a\\u56fe\\u3002\\r\\n// \\u989d\\u5916\\u6311\\u6218\\uff08\\u53ef\\u9009\\uff09\\r\\n// 1.\\u6350\\u8d60\\u4e8b\\u4ef6\\uff1a\\u6dfb\\u52a0 Donation \\u4e8b\\u4ef6\\uff0c\\u8bb0\\u5f55\\u6bcf\\u6b21\\u6350\\u8d60\\u7684\\u5730\\u5740\\u548c\\u91d1\\u989d\\u3002\\r\\n// 2.\\u6350\\u8d60\\u6392\\u884c\\u699c\\uff1a\\u5b9e\\u73b0\\u4e00\\u4e2a\\u529f\\u80fd\\uff0c\\u663e\\u793a\\u6350\\u8d60\\u91d1\\u989d\\u6700\\u591a\\u7684\\u524d 3 \\u4e2a\\u5730\\u5740\\u3002\\r\\n// 3.\\u65f6\\u95f4\\u9650\\u5236\\uff1a\\u6dfb\\u52a0\\u4e00\\u4e2a\\u65f6\\u95f4\\u9650\\u5236\\uff0c\\u53ea\\u6709\\u5728\\u7279\\u5b9a\\u65f6\\u95f4\\u6bb5\\u5185\\u624d\\u80fd\\u6350\\u8d60\\u3002\\r\\ncontract BeggingContract {\\r\\n    mapping(address => uint256) private donorMap;\\r\\n    address[] private donors;\\r\\n    address private owner;\\r\\n    // \\u65f6\\u95f4\\u9650\\u5236\\uff1a\\u6dfb\\u52a0\\u4e00\\u4e2a\\u65f6\\u95f4\\u9650\\u5236\\uff0c\\u53ea\\u6709\\u5728\\u7279\\u5b9a\\u65f6\\u95f4\\u6bb5\\u5185\\u624d\\u80fd\\u6350\\u8d60\\u3002\\r\\n    uint256 private windowsCloseTime;\\r\\n\\r\\n    // \\u6350\\u8d60\\u4e8b\\u4ef6\\uff1a\\u6dfb\\u52a0 Donation \\u4e8b\\u4ef6\\uff0c\\u8bb0\\u5f55\\u6bcf\\u6b21\\u6350\\u8d60\\u7684\\u5730\\u5740\\u548c\\u91d1\\u989d\\u3002\\r\\n    event DonationReceived(address donor, uint256 amount);\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        windowsCloseTime = block.timestamp + 60;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"only owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier windowsOpen() {\\r\\n        require(block.timestamp < windowsCloseTime, \\\"windows is closed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier windowsClose() {\\r\\n        require(block.timestamp >= windowsCloseTime, \\\"windows is closed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // \\u4e00\\u4e2a donate \\u51fd\\u6570\\uff0c\\u5141\\u8bb8\\u7528\\u6237\\u5411\\u5408\\u7ea6\\u53d1\\u9001\\u4ee5\\u592a\\u5e01\\uff0c\\u5e76\\u8bb0\\u5f55\\u6350\\u8d60\\u4fe1\\u606f\\u3002\\r\\n    function donate() external payable windowsOpen {\\r\\n        donorMap[msg.sender] += msg.value;\\r\\n        donors.push(msg.sender);\\r\\n        emit DonationReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    // \\u4e00\\u4e2a withdraw \\u51fd\\u6570\\uff0c\\u5141\\u8bb8\\u5408\\u7ea6\\u6240\\u6709\\u8005\\u63d0\\u53d6\\u6240\\u6709\\u8d44\\u91d1\\u3002\\r\\n    function withdraw() external onlyOwner windowsClose {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"No funds to withdraw\\\");\\r\\n        payable(owner).transfer(balance);\\r\\n    }\\r\\n\\r\\n    // \\u4e00\\u4e2a getDonation \\u51fd\\u6570\\uff0c\\u5141\\u8bb8\\u67e5\\u8be2\\u67d0\\u4e2a\\u5730\\u5740\\u7684\\u6350\\u8d60\\u91d1\\u989d\\u3002\\r\\n    function getDonation(address addr) external view returns (uint256) {\\r\\n        return donorMap[addr];\\r\\n    }\\r\\n\\r\\n    // \\u6350\\u8d60\\u6392\\u884c\\u699c\\uff1a\\u5b9e\\u73b0\\u4e00\\u4e2a\\u529f\\u80fd\\uff0c\\u663e\\u793a\\u6350\\u8d60\\u91d1\\u989d\\u6700\\u591a\\u7684\\u524d 3 \\u4e2a\\u5730\\u5740\\u3002\\r\\n    function getTopDonors()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory, uint256[] memory)\\r\\n    {\\r\\n        address[] memory topDonors = new address[](3);\\r\\n        uint256[] memory topAmounts = new uint256[](3);\\r\\n        // \\u904d\\u5386\\u67e5\\u8be2TOP3\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            address maxAddres = address(0);\\r\\n            uint256 maxAmount = 0;\\r\\n            for (uint256 j = 0; j < donors.length; j++) {\\r\\n                address donor = donors[j];\\r\\n                // \\u5982\\u679c\\u5df2\\u7ecf\\u5728\\u524d\\u97623\\u4e2a\\u5730\\u5740\\u4e2d\\uff0c\\u8df3\\u8fc7\\r\\n                bool isInTop = false;\\r\\n                for (uint256 k = 0; k < topDonors.length; k++) {\\r\\n                    if (topDonors[k] == donor) {\\r\\n                        isInTop = true;\\r\\n                    }\\r\\n                }\\r\\n                if (isInTop) {\\r\\n                    continue;\\r\\n                }\\r\\n                // \\u5224\\u65ad\\u662f\\u5426\\u5927\\u4e8e\\u4e0a\\u4e00\\u4e2a\\u6700\\u5927\\u503c\\r\\n                uint256 amount = donorMap[donor];\\r\\n                if (amount > maxAmount) {\\r\\n                    maxAddres = donor;\\r\\n                    maxAmount = amount;\\r\\n                }\\r\\n            }\\r\\n            if (maxAddres != address(0)) {\\r\\n                topDonors[i] = maxAddres;\\r\\n                topAmounts[i] = maxAmount;\\r\\n            }\\r\\n        }\\r\\n        return (topDonors, topAmounts);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x85553aa07b9d3be19db09d31f91e5494627337f9b19a7bbdcf035e5b19bc6faf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603c42605c9190609f565b60038190555060cc565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060a8826066565b915060b1836066565b925082820190508082111560c65760c56070565b5b92915050565b610b95806100db6000396000f3fe60806040526004361061003f5760003560e01c80633ccfd60b14610044578063410a1d321461005b578063d6387ed814610098578063ed88c68e146100c4575b600080fd5b34801561005057600080fd5b506100596100ce565b005b34801561006757600080fd5b50610082600480360381019061007d91906106d7565b610257565b60405161008f919061071d565b60405180910390f35b3480156100a457600080fd5b506100ad61029f565b6040516100bb9291906108b4565b60405180910390f35b6100cc61053d565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461015e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101559061096e565b60405180910390fd5b6003544210156101a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019a906109da565b60405180910390fd5b6000479050600081116101eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e290610a46565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610253573d6000803e3d6000fd5b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060806000600367ffffffffffffffff8111156102bf576102be610a66565b5b6040519080825280602002602001820160405280156102ed5781602001602082028036833780820191505090505b5090506000600367ffffffffffffffff81111561030d5761030c610a66565b5b60405190808252806020026020018201604052801561033b5781602001602082028036833780820191505090505b50905060005b60038110156105305760008060005b60018054905081101561047d5760006001828154811061037357610372610a95565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000805b885181101561040c578273ffffffffffffffffffffffffffffffffffffffff168982815181106103d7576103d6610a95565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036103ff57600191505b80806001019150506103a4565b50801561041a575050610470565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508481111561046c578295508094505b5050505b8080600101915050610350565b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461052157818584815181106104c6576104c5610a95565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508084848151811061051457610513610a95565b5b6020026020010181815250505b50508080600101915050610341565b5081819350935050509091565b6003544210610581576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610578906109da565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105cf9190610af3565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f264f630d9efa0d07053a31163641d9fcc0adafc9d9e76f1c37c2ce3a558d2c52333460405161066a929190610b36565b60405180910390a1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106a482610679565b9050919050565b6106b481610699565b81146106bf57600080fd5b50565b6000813590506106d1816106ab565b92915050565b6000602082840312156106ed576106ec610674565b5b60006106fb848285016106c2565b91505092915050565b6000819050919050565b61071781610704565b82525050565b6000602082019050610732600083018461070e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61076d81610699565b82525050565b600061077f8383610764565b60208301905092915050565b6000602082019050919050565b60006107a382610738565b6107ad8185610743565b93506107b883610754565b8060005b838110156107e95781516107d08882610773565b97506107db8361078b565b9250506001810190506107bc565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61082b81610704565b82525050565b600061083d8383610822565b60208301905092915050565b6000602082019050919050565b6000610861826107f6565b61086b8185610801565b935061087683610812565b8060005b838110156108a757815161088e8882610831565b975061089983610849565b92505060018101905061087a565b5085935050505092915050565b600060408201905081810360008301526108ce8185610798565b905081810360208301526108e28184610856565b90509392505050565b600082825260208201905092915050565b7f6f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006109586021836108eb565b9150610963826108fc565b604082019050919050565b600060208201905081810360008301526109878161094b565b9050919050565b7f77696e646f777320697320636c6f736564000000000000000000000000000000600082015250565b60006109c46011836108eb565b91506109cf8261098e565b602082019050919050565b600060208201905081810360008301526109f3816109b7565b9050919050565b7f4e6f2066756e647320746f207769746864726177000000000000000000000000600082015250565b6000610a306014836108eb565b9150610a3b826109fa565b602082019050919050565b60006020820190508181036000830152610a5f81610a23565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610afe82610704565b9150610b0983610704565b9250828201905080821115610b2157610b20610ac4565b5b92915050565b610b3081610699565b82525050565b6000604082019050610b4b6000830185610b27565b610b58602083018461070e565b939250505056fea2646970667358221220c67da9bff0e0c4281f57892c8ce80a0ec0e01b96a6b65505392c02cbe750efc764736f6c634300081e0033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80633ccfd60b14610044578063410a1d321461005b578063d6387ed814610098578063ed88c68e146100c4575b600080fd5b34801561005057600080fd5b506100596100ce565b005b34801561006757600080fd5b50610082600480360381019061007d91906106d7565b610257565b60405161008f919061071d565b60405180910390f35b3480156100a457600080fd5b506100ad61029f565b6040516100bb9291906108b4565b60405180910390f35b6100cc61053d565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461015e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101559061096e565b60405180910390fd5b6003544210156101a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019a906109da565b60405180910390fd5b6000479050600081116101eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e290610a46565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610253573d6000803e3d6000fd5b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060806000600367ffffffffffffffff8111156102bf576102be610a66565b5b6040519080825280602002602001820160405280156102ed5781602001602082028036833780820191505090505b5090506000600367ffffffffffffffff81111561030d5761030c610a66565b5b60405190808252806020026020018201604052801561033b5781602001602082028036833780820191505090505b50905060005b60038110156105305760008060005b60018054905081101561047d5760006001828154811061037357610372610a95565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000805b885181101561040c578273ffffffffffffffffffffffffffffffffffffffff168982815181106103d7576103d6610a95565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036103ff57600191505b80806001019150506103a4565b50801561041a575050610470565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508481111561046c578295508094505b5050505b8080600101915050610350565b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461052157818584815181106104c6576104c5610a95565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508084848151811061051457610513610a95565b5b6020026020010181815250505b50508080600101915050610341565b5081819350935050509091565b6003544210610581576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610578906109da565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105cf9190610af3565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f264f630d9efa0d07053a31163641d9fcc0adafc9d9e76f1c37c2ce3a558d2c52333460405161066a929190610b36565b60405180910390a1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106a482610679565b9050919050565b6106b481610699565b81146106bf57600080fd5b50565b6000813590506106d1816106ab565b92915050565b6000602082840312156106ed576106ec610674565b5b60006106fb848285016106c2565b91505092915050565b6000819050919050565b61071781610704565b82525050565b6000602082019050610732600083018461070e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61076d81610699565b82525050565b600061077f8383610764565b60208301905092915050565b6000602082019050919050565b60006107a382610738565b6107ad8185610743565b93506107b883610754565b8060005b838110156107e95781516107d08882610773565b97506107db8361078b565b9250506001810190506107bc565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61082b81610704565b82525050565b600061083d8383610822565b60208301905092915050565b6000602082019050919050565b6000610861826107f6565b61086b8185610801565b935061087683610812565b8060005b838110156108a757815161088e8882610831565b975061089983610849565b92505060018101905061087a565b5085935050505092915050565b600060408201905081810360008301526108ce8185610798565b905081810360208301526108e28184610856565b90509392505050565b600082825260208201905092915050565b7f6f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006109586021836108eb565b9150610963826108fc565b604082019050919050565b600060208201905081810360008301526109878161094b565b9050919050565b7f77696e646f777320697320636c6f736564000000000000000000000000000000600082015250565b60006109c46011836108eb565b91506109cf8261098e565b602082019050919050565b600060208201905081810360008301526109f3816109b7565b9050919050565b7f4e6f2066756e647320746f207769746864726177000000000000000000000000600082015250565b6000610a306014836108eb565b9150610a3b826109fa565b602082019050919050565b60006020820190508181036000830152610a5f81610a23565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610afe82610704565b9150610b0983610704565b9250828201905080821115610b2157610b20610ac4565b5b92915050565b610b3081610699565b82525050565b6000604082019050610b4b6000830185610b27565b610b58602083018461070e565b939250505056fea2646970667358221220c67da9bff0e0c4281f57892c8ce80a0ec0e01b96a6b65505392c02cbe750efc764736f6c634300081e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9821,
        "contract": "contracts/task2/BeggingContract.sol:BeggingContract",
        "label": "donorMap",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9824,
        "contract": "contracts/task2/BeggingContract.sol:BeggingContract",
        "label": "donors",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9826,
        "contract": "contracts/task2/BeggingContract.sol:BeggingContract",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9828,
        "contract": "contracts/task2/BeggingContract.sol:BeggingContract",
        "label": "windowsCloseTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}